// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=nota);
    Or(a=nota, b=instruction[5], out=loadA);

    // Populate A register with ALU output or instruction
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);

    // A register
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM, out=inPC);

    // D register
    DRegister(in=outALU, load=instruction[4], out=outD);

    Not(in=reset, out=incPC);
    PC(in=inPC, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);

    // Determine writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    // A or M input to ALU
    Mux16(a=outA, b=inM, sel=instruction[12], out=yALU);

    ALU(
        x=outD,
        y=yALU,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outALU,
        out=outM,
        zr=zr,
        ng=ng
    );

    // comp => 0
    Not(in=ng, out=notNg);

    // comp != 0
    Not(in=zr, out=notZr);

    // comp > 0
    And(a=notZr, b=notNg, out=pos);

    // comp <= 0
    Or(a=ng, b=zr, out=notPos);

    DMux8Way(
        in=instruction[15],
        sel=instruction[0..2],
        a=null,
        b=JGT,
        c=JEQ,
        d=JGE,
        e=JLT,
        f=JNE,
        g=JLE,
        h=JMP
    );
    
    And(a=JGT, b=pos, out=doJGT);
    And(a=JEQ, b=zr, out=doJEQ);
    And(a=JGE, b=notNg, out=doJGE);
    And(a=JLT, b=ng, out=doJLT);
    And(a=JNE, b=notZr, out=doJNE);
    And(a=JLE, b=notPos, out=doJLE);

    Or8Way(
        in[0]=doJGT,
        in[1]=doJEQ,
        in[2]=doJGE,
        in[3]=doJLT,
        in[4]=doJNE,
        in[5]=doJLE,
        in[6]=JMP,
        out=loadPC
    );
}